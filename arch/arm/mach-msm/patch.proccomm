--- /home/nonamer/qsd8x50-bravo-/arch/arm/mach-msm/proc_comm.c2	2012-07-30 16:04:50.103003981 +0300
+++ /home/nonamer/qsd8x50-bravo-/arch/arm/mach-msm/proc_comm.c	2012-07-30 18:24:39.907435005 +0300
@@ -1,7 +1,6 @@
 /* arch/arm/mach-msm/proc_comm.c
  *
  * Copyright (C) 2007-2008 Google, Inc.
- * Copyright (c) 2009-2012, Code Aurora Forum. All rights reserved.
  * Author: Brian Swetland <swetland@google.com>
  *
  * This software is licensed under the terms of the GNU General Public
@@ -19,26 +18,25 @@
 #include <linux/errno.h>
 #include <linux/io.h>
 #include <linux/spinlock.h>
-#include <linux/module.h>
 #include <mach/msm_iomap.h>
 #include <mach/system.h>
 
 #include "proc_comm.h"
-#include "smd_private.h"
 
-static inline void notify_other_proc_comm(void)
+static inline void msm_a2m_int(uint32_t irq)
 {
-	/* Make sure the write completes before interrupt */
-	wmb();
 #if defined(CONFIG_ARCH_MSM7X30)
-	__raw_writel(1 << 6, MSM_APCS_GCC_BASE + 0x8);
-#elif defined(CONFIG_ARCH_MSM8X60)
-	__raw_writel(1 << 5, MSM_GCC_BASE + 0x8);
+	writel(1 << irq, MSM_GCC_BASE + 0x8);
 #else
-	__raw_writel(1, MSM_CSR_BASE + 0x400 + (6) * 4);
+	writel(1, MSM_CSR_BASE + 0x400 + (irq * 4));
 #endif
 }
 
+static inline void notify_other_proc_comm(void)
+{
+	msm_a2m_int(6);
+}
+
 #define APP_COMMAND 0x00
 #define APP_STATUS  0x04
 #define APP_DATA1   0x08
@@ -50,28 +48,29 @@
 #define MDM_DATA2   0x1C
 
 static DEFINE_SPINLOCK(proc_comm_lock);
-static int msm_proc_comm_disable;
+
+/* The higher level SMD support will install this to
+ * provide a way to check for and handle modem restart.
+ */
+int (*msm_check_for_modem_crash)(void);
 
 /* Poll for a state change, checking for possible
  * modem crashes along the way (so we don't wait
- * forever while the ARM9 is blowing up.
+ * forever while the ARM9 is blowing up).
  *
  * Return an error in the event of a modem crash and
  * restart so the msm_proc_comm() routine can restart
  * the operation from the beginning.
  */
-static int proc_comm_wait_for(unsigned addr, unsigned value)
+static int proc_comm_wait_for(void __iomem *addr, unsigned value)
 {
-	while (1) {
-		/* Barrier here prevents excessive spinning */
-		mb();
-		if (readl_relaxed(addr) == value)
+	for (;;) {
+		if (readl(addr) == value)
 			return 0;
 
-		if (smsm_check_for_modem_crash())
-			return -EAGAIN;
-
-		udelay(5);
+		if (msm_check_for_modem_crash)
+			if (msm_check_for_modem_crash())
+				return -EAGAIN;
 	}
 }
 
@@ -102,57 +101,55 @@
 
 int msm_proc_comm(unsigned cmd, unsigned *data1, unsigned *data2)
 {
-	unsigned base = (unsigned)MSM_SHARED_RAM_BASE;
+	void __iomem *base = MSM_SHARED_RAM_BASE;
 	unsigned long flags;
 	int ret;
 
 	spin_lock_irqsave(&proc_comm_lock, flags);
 
-	if (msm_proc_comm_disable) {
-		ret = -EIO;
-		goto end;
-	}
-
-
-again:
-	if (proc_comm_wait_for(base + MDM_STATUS, PCOM_READY))
-		goto again;
-
-	writel_relaxed(cmd, base + APP_COMMAND);
-	writel_relaxed(data1 ? *data1 : 0, base + APP_DATA1);
-	writel_relaxed(data2 ? *data2 : 0, base + APP_DATA2);
-
-	/* Make sure the writes complete before notifying the other side */
-	wmb();
-	notify_other_proc_comm();
-
-	if (proc_comm_wait_for(base + APP_COMMAND, PCOM_CMD_DONE))
-		goto again;
-
-	if (readl_relaxed(base + APP_STATUS) == PCOM_CMD_SUCCESS) {
-		if (data1)
-			*data1 = readl_relaxed(base + APP_DATA1);
-		if (data2)
-			*data2 = readl_relaxed(base + APP_DATA2);
-		ret = 0;
-	} else {
-		ret = -EIO;
+	for (;;) {
+		if (proc_comm_wait_for(base + MDM_STATUS, PCOM_READY))
+			continue;
+
+		writel(cmd, base + APP_COMMAND);
+		writel(data1 ? *data1 : 0, base + APP_DATA1);
+		writel(data2 ? *data2 : 0, base + APP_DATA2);
+
+		notify_other_proc_comm();
+
+		if (proc_comm_wait_for(base + APP_COMMAND, PCOM_CMD_DONE))
+			continue;
+
+		if (readl(base + APP_STATUS) != PCOM_CMD_FAIL) {
+			if (data1)
+				*data1 = readl(base + APP_DATA1);
+			if (data2)
+				*data2 = readl(base + APP_DATA2);
+			ret = 0;
+		} else {
+			ret = -EIO;
+		}
+		break;
 	}
 
-	writel_relaxed(PCOM_CMD_IDLE, base + APP_COMMAND);
+	writel(PCOM_CMD_IDLE, base + APP_COMMAND);
 
-	switch (cmd) {
-	case PCOM_RESET_CHIP:
-	case PCOM_RESET_CHIP_IMM:
-	case PCOM_RESET_APPS:
-		msm_proc_comm_disable = 1;
-		printk(KERN_ERR "msm: proc_comm: proc comm disabled\n");
-		break;
-	}
-end:
-	/* Make sure the writes complete before returning */
-	wmb();
 	spin_unlock_irqrestore(&proc_comm_lock, flags);
+
 	return ret;
 }
-EXPORT_SYMBOL(msm_proc_comm);
+
+/*
+ * We need to wait for the ARM9 to at least partially boot
+ * up before we can continue. Since the ARM9 does resource
+ * allocation, if we dont' wait we could end up crashing or in
+ * and unknown state. This function should be called early to
+ * wait on the ARM9.
+ */
+void __init proc_comm_boot_wait(void)
+{
+	void __iomem *base = MSM_SHARED_RAM_BASE;
+ 
+	proc_comm_wait_for(base + MDM_STATUS, PCOM_READY);
+ 
+}
